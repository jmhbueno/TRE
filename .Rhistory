tre_cod_22,
tre_cod_24,
tre_cod_25,
tre_cod_26,
tre_cod_29,
tre_cod_30,
tre_cod_32,
tre_cod_34,
tre_cod_37,
tre_cod_38,
tre_cod_39,
tre_cod_40) %>%
fa(nfactors = 2,
cor = "tet",
fm = "pa",
rotate = "geominQ")
efa5$loadings
df1 %>% select(
tre_cod_02,
tre_cod_03,
tre_cod_10,
tre_cod_12,
tre_cod_13,
tre_cod_17,
tre_cod_18,
tre_cod_20,
tre_cod_21,
tre_cod_22,
tre_cod_24,
tre_cod_25,
tre_cod_26,
tre_cod_29,
tre_cod_30,
tre_cod_32,
tre_cod_34,
tre_cod_37,
tre_cod_38,
tre_cod_39,
tre_cod_40) %>% scree(pc=FALSE)
efa6 <- df1 %>% select(
tre_cod_02,
tre_cod_03,
tre_cod_10,
tre_cod_12,
tre_cod_13,
tre_cod_17,
tre_cod_18,
tre_cod_20,
tre_cod_21,
tre_cod_22,
tre_cod_24,
tre_cod_25,
tre_cod_26,
tre_cod_29,
tre_cod_30,
tre_cod_32,
tre_cod_34,
tre_cod_37,
tre_cod_38,
tre_cod_39,
tre_cod_40) %>%
fa(nfactors = 2,
cor = "tet",
fm = "pa",
rotate = "geominQ")
efa6$loadings
df1 %>% names() %>% as.data.frame()
# Fidedignidade do fator 2 (Estratégias Eficazes)
df1 %>% select(87,95,96,100,101,104,105,109,120,121) %>% omega()
?omega()
# Fidedignidade do fator 2 (Estratégias Eficazes)
df1 %>% select(87,95,96,100,101,104,105,109,120,121) %>% omega(poly = TRUE)
# Fidedignidade do fator 1 (Estratégias Ineficazes)
df1 %>% select(86,93,103,107,708,112,113,115,117,122,123) %>% omega(poly = TRUE)
# Fidedignidade do fator 1 (Estratégias Ineficazes)
df1 %>% select(86,93,103,107,108,112,113,115,117,122,123) %>% omega(poly = TRUE)
efa6$loadings
glimpse(df1)
count(df1,tre_01) %>% mutate(porc = n/sum(n)*100)
names(df1)
names(df1) %>% as.data.frame()
df1$DASS_est <- df1 %>% select(64,69,71,74,75,77,81) %>% rowMeans()
df1$DASS_ans <- df1 %>% select(65,67,70,72,78,82,83) %>% rowMeans()
df1$DASS_dep <- df1 %>% select(66,68,73,76,79,80,84) %>% rowMeans()
names(df1) %>% as.data.frame()
df1 %>% select(64,69,71,74,75,77,81) %>% omega(poly=TRUE)
df1 %>% select(65,67,70,72,78,82,83) %>% omega(poly=TRUE)
df1 %>% select(66,68,73,76,79,80,84) %>% omega(poly=TRUE)
names(df1) %>% as.data.frame()
df1 %>% select(QRE_01,QRE_03,QRE_05,QRE_07,QRE_08,QRE_10)
df1$QRE_reava <- df1 %>% select(QRE_01,QRE_03,QRE_05,QRE_07,QRE_08,QRE_10) %>% rowMeans()
# Fator: Supressão
df1$QRE_supre <- df1 %>% select(QRE_02,QRE_04,QRE_06,QRE_09) %>% rowMeans()
df1 %>% select(QRE_01,QRE_03,QRE_05,QRE_07,QRE_08,QRE_10) %>% omega(poly = TRUE)
df1 %>% select(QRE_02,QRE_04,QRE_06,QRE_09) %>% omega(poly = TRUE)
names(df1) %>% as.data.frame()
# Fator 1 (Estratégias Ineficazes)
df1$TRE_ine <- df1 %>% select(86,93,103,107,108,112,113,115,117,122,123) %>% rowSums()
# Fator 2 (Estratégias Eficazes)
df1$TRE_efi <- df1 %>% select(87,95,96,100,101,104,105,109,120,121) %>% rowSums()
names(df1) %>% as.data.frame()
correlações <- corr.test(df1[124:130])
correlações$stars
library(mirt)
plot(mod_2PL,type="trace")
load("~/R/TRE/R/.RData")
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit')
library(psych)
library(tidyverse)
library(readxl)
library(expss)
#library(stats)
library(mirt)
## Rasch (parâmetro b estimado e parâmetro a constante e igual a 1)
mod_ine_rasch <-
df1 %>% select(86,93,103,107,108,112,113,115,117,122,123) %>%
mirt(1, itemtype = "Rasch", SE = TRUE)
mod_efi_rasch <-
df1 %>% select(87,95,96,100,101,104,105,109,120,121) %>%
mirt(1, itemtype = "Rasch", SE = TRUE)
mod_ine_2PL <-
df1 %>% select(86,93,103,107,108,112,113,115,117,122,123) %>%
mirt(1, itemtype = "2PL", SE = TRUE)
mod_efi_2PL <-
df1 %>% select(87,95,96,100,101,104,105,109,120,121) %>%
mirt(1, itemtype = "2PL", SE = TRUE)
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit')
itemfit(mod_efi_rasch,fit_stats = 'infit')
itemfit(mod_ine_2PL,fit_stats = 'infit')
itemfit(mod_efi_2PL,fit_stats = 'infit')
# comparar modelos
# Olhar se a diferença entre os qui-quadrados é significativa
# Se for, o menor valor de AIC é o modelo mais ajustado.
anova(mod_ine_rasch,mod_ine_2PL)
anova(mod_efi_rasch,mod_efi_2PL)
coef(mod_ine_2PL, simplify=TRUE,IRTpars=TRUE)
# Parâmetros dos itens
coef(mod_ine_rasch, simplify=TRUE,IRTpars=TRUE)
coef(mod_efi_2PL, simplify=TRUE,IRTpars=TRUE)
plot(mod_ine_2PL)
plot(mod_efi_2PL)
plot(mod_ine_2PL,type="trace")
plot(mod_ine_2PL,type="infotrace")
plot(mod_efi_2PL,type="infotrace")
plot(mod_ine_2PL, type="infoSE")
plot(mod_efi_2PL, type="infoSE")
summary(mod_ine_2PL)
summary(mod_efi_2PL)
correlações$stars
correlações$stars %>% pander::pander()
correlações$stars %>% knitr::kable()
write.csv(df1, "df1.csv")
efa6
df1 %>% select(c(85:123)) %>% scree(pc = FALSE)
# Fidedignidade do fator 1 (Estratégias Ineficazes)
df1 %>% select(86,93,103,107,108,112,113,115,117,122,123) %>% omega(poly = TRUE)
# Fidedignidade do fator 2 (Estratégias Eficazes)
df1 %>% select(87,95,96,100,101,104,105,109,120,121) %>% omega(poly = TRUE)
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit')
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit') %>% knitr::kable()
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit') %>% select(item, infit, outfit) %>% knitr::kable()
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit') %>% select(item, infit, outfit) %>% summary() %>% knitr::kable()
# Índices de ajuste aos modelos
itemfit(mod_ine_rasch,fit_stats = 'infit') %>% select(infit, outfit) %>% summary() %>% knitr::kable()
anova(mod_ine_rasch,mod_ine_2PL)
library(knitr)
# comparar modelos
# Olhar se a diferença entre os qui-quadrados é significativa
# Se for, o menor valor de AIC é o modelo mais ajustado.
anova(mod_ine_rasch,mod_ine_2PL) %>% kable()
anova(mod_efi_rasch,mod_efi_2PL) %>% kable()
itemfit(mod_ine_2PL,fit_stats = 'infit')%>% select(infit, outfit) %>% summary() %>% kable()
itemfit(mod_efi_2PL,fit_stats = 'infit') %>% select(infit, outfit) %>% summary() %>% kable()
coef(mod_ine_2PL, simplify=TRUE,IRTpars=TRUE)
coef(mod_ine_2PL, simplify=TRUE,IRTpars=TRUE) %>% select(1:3) %>% kable()
coef_tri_ine <- coef(mod_ine_2PL, simplify=TRUE,IRTpars=TRUE)
coef_tri_ine$items
coef_tri_ine$items %>% select(1:3) %>% kable()
coef_tri_ine$items %>% as.data.frame() %>% select(1:3) %>% kable()
coef_tri_ine$items %>% as.data.frame() %>% select(1:2) %>% kable()
coef_tri_efi <- coef(mod_efi_2PL, simplify=TRUE,IRTpars=TRUE)
coef_tri_efi$items %>% as.data.frame() %>% select(1:2) %>% kable()
coef_tri_efi$items %>% as.data.frame() %>% select(1:2) %>% kable()
coef_tri_ine$items %>% as.data.frame() %>% select(1:2) %>% summary() %>% kable()
coef_tri_efi$items %>% as.data.frame() %>% select(1:2) %>% summary() %>% kable()
names(df1) %>% as.data.frame()
library(psych)
library(tidyverse)
library(readxl)
library(expss)
library(stats)
library(mirt)
library(knitr)
names(df1) %>% as.data.frame()
dataset %>%             # pegar o dataframe dataset
tabyl(sexo) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
pander()
library(pander)
dataset %>%             # pegar o dataframe dataset
tabyl(sexo) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
install.packages("janitor")
library(janitor)
dataset %>%             # pegar o dataframe dataset
tabyl(sexo) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
df1 %>%             # pegar o dataframe dataset
tabyl(sexo) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
adorn_percentages()
df1 %>%
tabyl(sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("row") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
tabyl(sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("row") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 2) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
tabyl(sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("row") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
#  adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
filter(!is.na(sexo)) %>%
tabyl(country,sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("row") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
filter(!is.na(sexo)) %>%
tabyl(sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("row") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%             # pegar o dataframe dataset
tabyl(country) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
df1 %>%             # pegar o dataframe dataset
tabyl(sexo) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
names(df1) %>% as.data.frame()
df1 %>%             # pegar o dataframe dataset
tabyl(sexo,escolaridade) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
df1 %>%
tabyl(escolaridade,sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("row") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
tabyl(escolaridade,sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("col") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
tabyl(sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("col") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
tabyl(sexo) %>%           # função de tabulação do janitor
adorn_totals(c("row","col")) %>% # adiciona o N
adorn_percentages("col") %>%     # adiciona porcentagens
adorn_pct_formatting(
rounding = "half up",          # arredondar do cinco pra cima
digits = 0) %>%                # número de casas decimais
#  adorn_ns() %>%                   # mostra N e % juntas
kable()                         # melhora a visualização dos dados.
df1 %>%
tabyl(sexo) %>%
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_rounding() %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_rounding(digits = 2) %>%
# adorn_pct_formatting(
#   rounding = "half up",
#   digits = 0) %>%
adorn_ns() %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
kable()
df1 %>%
tabyl(escolaridade,sexo) %>%
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
kable()
names(df1) %>% as.data.frame()
df1 %>%             # pegar o dataframe dataset
tabyl(renda) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%    # acrescente uma linha com os totais
kable()
df1 %>%             # pegar o dataframe dataset
tabyl(renda) %>%    # use a função tabyl para tabular as categorias de país
adorn_totals() %>%
mutate("%" = percent*100) %>% # acrescente uma linha com os totais
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
mean(df1$idade, na.rm = TRUE)
sd(df1$idade, na.rm = TRUE)
round(mean(df1$idade, na.rm = TRUE),digits = 2)
round(sd(df1$idade, na.rm = TRUE),digits = 2)
describe(df1$idade)
describe(df1$idade) %>% kable()
round(describe(df1$idade),digits = 2) %>% kable()
df1 %>%
tabyl(renda) %>%
adorn_totals() %>%
mutate("%" = percent*100)
df1 %>%
tabyl(renda) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
round(mutate("%" = percent*100),digits = 2) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100,) %>%
round(digits = 2)
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100,) %>%
round(digits = 2) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
round(digits = 2) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(renda) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
names(df1) %>% as.data.frame()
df1 %>%
tabyl(cor) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(cor) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(escolaridade,sexo) %>%
adorn_totals(c("row","col")) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(
rounding = "half up",
digits = 0) %>%
adorn_ns() %>%
kable()
df1 %>%
tabyl(escolaridade) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(cor) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(escolaridade) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1$escolaridade[df1$escolaridade == "Fundamental completo"] <-"Ensino fundamental"
df1$escolaridade[df1$escolaridade == "Fundamental incompleto"] <-"Ensino fundamental"
df1$escolaridade[df1$escolaridade == "Médio completo"] <-"Ensino médio"
df1$escolaridade[df1$escolaridade == "Sem escolaridade"] <-"Ensino fundamental"
df1$escolaridade[df1$escolaridade == "Sem instrução"] <-"Ensino fundamental"
df1$escolaridade[df1$escolaridade == "Superior completo"] <-"Ensino superior"
df1 %>%
tabyl(escolaridade) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
round(describe(df1$idade),digits = 2) %>% kable()
df1 %>%
tabyl(sexo) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(cor) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
df1 %>%
tabyl(escolaridade) %>%
adorn_totals() %>%
mutate("%" = percent*100) %>%
kable()
round(describe(df1$idade),digits = 2) %>% kable()
